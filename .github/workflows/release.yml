name: Build Release

# Only triggers when a release is published, draft releases do not count.
# Warning: use no tabs when editing this file

on:
  release:
    types: published

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1

      - name: Get Tag
        uses: olegtarasov/get-tag@v2.1.1
        id: getTag
        with:
          tagRegex: "v(.*)" # This filters out the `v` from the tag. (Ex: v3.8.0 becomes 3.8.0)

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build DevilLib
        run: './gradlew build'

      - name: Get Release Upload URL
        uses: actions/github-script@0.3.0
        id: getReleaseURL
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const core = require('@actions/core')
            core.setOutput("uploadurl",context.payload.release.upload_url)

      - name: Upload DevilLib Jar
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.getReleaseURL.outputs.uploadurl }}
          asset_path: ./build/libs/devillib-${{ steps.getTag.outputs.tag }}.jar
          asset_name: devillib-${{ steps.getTag.outputs.tag }}.jar
          asset_content_type: application/java-archive

      - name: Upload DevilLib Sources Jar
        id: upload-release-asset-sources
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.getReleaseURL.outputs.uploadurl }}
          asset_path: ./build/libs/devillib-${{ steps.getTag.outputs.tag }}-sources.jar
          asset_name: devillib-${{ steps.getTag.outputs.tag }}-sources.jar
          asset_content_type: application/java-archive



  generateJSON:
    # The build job (above) must complete successfully in order for this job to run.
    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Generate devillib.json
        run: './gradlew vendorJSON'

      - name: Commit devillib.json
        uses: EndBug/add-and-commit@v7.3.0
        with:
          add: './devillib.json'
          branch: 'master'
          message: 'Automated - Update devillib.json for release'

      - name: Get Release Upload URL
        uses: actions/github-script@0.3.0
        id: getReleaseURL
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const core = require('@actions/core')
            core.setOutput("uploadurl",context.payload.release.upload_url)

      - name: Upload devillib.json to Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.getReleaseURL.outputs.uploadurl }}
          asset_path: ./devillib.json
          asset_name: devillib.json
          asset_content_type: application/json
          
  generateNetworkAlertsJar:
    # The build job (above) must complete successfully in order for this job to run.
    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Generate NetworkAlerts Jar
        run: './gradlew generateJar'
        working-directory: ./NetworkAlerts

      - name: print directory and all files
        run: ls -R
        working-directory: ./NetworkAlerts/build/libs


      - name: Commit NetworkAlerts.jar
        uses: EndBug/add-and-commit@v7.3.0
        with:
          add: './NetworkAlerts/build/libs/NetworkAlerts.jar'
          branch: 'master'
          message: 'Automated - Update NetworkAlerts.jar for release'

      - name: Get Release Upload URL
        uses: actions/github-script@0.3.0
        id: getReleaseURL
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const core = require('@actions/core')
            core.setOutput("uploadurl",context.payload.release.upload_url)

      - name: Upload NetworkAlerts.jar to Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.getReleaseURL.outputs.uploadurl }}
          asset_path: ./NetworkAlerts/build/libs/NetworkAlerts.jar
          asset_name: NetworkAlerts.jar
          asset_content_type: application/java-archive

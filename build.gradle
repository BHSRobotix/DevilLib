plugins {
    id "java-library"
    id "eclipse"
    id "edu.wpi.first.GradleRIO" version "2023.2.1"
    id "org.ajoberstar.grgit" version "3.0.0"
    id "maven-publish"
    id "io.github.mosadie.vendorJSON" version "1.0"
}

group = archivesGroup

// Sets JDK compatibility to JDK 11
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

if (System.getProperty("local")) {
    println("This is a local Compile:")
    version = "local"
}
else {
    println("This is a versioned Compile:")
    version = LibraryVersion
}

println("LibraryVersion=" + LibraryVersion + "; compile version=" + version)

// This task updates the vendor json file for this project to the specified version.
vendorJSON {
    fileName = jsonFileName
    version = LibraryVersion
    addJavaArtifact(archivesGroup, archivesBaseName, LibraryVersion)
}

// This section is to prevent  from accidentally deploying to a robot
deploy {
    for (String task : project.gradle.startParameter.taskNames) {
        if (task == "deploy")
            throw new GradleException("This is a Library! You can't deploy it to the robot!")
    }
}

java {
    withJavadocJar();
    withSourcesJar();
}

repositories {
    // This is needed to fix problem with the url below redirecting to an http (insecure) url.
    //maven {
    //    url "https://www.revrobotics.com/content/sw/color-sensor-v3/sdk/maven/"
    //    allowInsecureProtocol = true
    //}

    mavenLocal()
    mavenCentral()
}

// Setup eclipse classpath settings, so the javadoc and sources are available in eclipse
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

// Defining dependencies. In this case, WPILib, and some vendor libraries (NavX, CTRE)
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    // For reference, here are a few more of the easy to add libraries not currently used:
    //implementation pathfinder() (Jaci's)
    //implementation openrioMatchData()

    // Quick guide to keywords:
    // api is for libraries that are expected to be needed in the main robot project.
    // implementation is for libraries that will not be needed in the main robot project.
    // (Both api and implementation keywords will have the library automatically downloaded with RobotLib)
    // compileOnly expects the dependency to be provided somewhere else. (Ex. by a main robot project)
    // compile means include in the output library jar (see below).
}

// Returns either the name of the current branch, or an empty string if no git repo is found.
def branch = { ->
    if (grgit == null) { // If there's no git repo.
        return ""
    }

    return grgit.branch.current().getName()
}

// Returns either the short hash of the last commit or an empty string if no git repo is found.
def hash = { ->
    if (grgit == null) { // If there's no git repo.
        return ""
    }

    return grgit.head().abbreviatedId
}

// Setting up RobotLib Jar File. In this case, adding version information to jar manifest.
jar {
    manifest {
        attributes("LibraryVersion": LibraryVersion)	// from gradle.properties file.
        attributes("Time": new Date().format("yyyy-MM-dd HH:mm:ss"))
        attributes("User": System.getProperty("user.name"))
        attributes("Branch": branch())
        attributes("Commit": hash())
    }
}

// Create Sources Jar
//task sourcesJar(type: Jar, dependsOn: classes) {
//    classifier = 'sources'
//    from sourceSets.main.allSource
//}

// When Javadoc is created (./gradlew.bat javadoc) it will be in this directory in the project folder.
javadoc {
    destinationDir = file("doc")
    title = "DevilLib"
    options.overview = "src/main/resources/overview.html"
    options.addBooleanOption "-no-module-directories", true
    options.addBooleanOption "-frames", true
}

// Create Javadoc Jar
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

// Additional artifacts to publish for JitPack
artifacts {
    archives sourcesJar
    archives javadocJar
}

// Required with gradle 7.1.1. Configures PublishToMavenLocal task. This task is required to get our
// jars published to the local maven repository on this PC for consumption by robot projects on this PC.
// The PubishToMavenLocal task is executed in the eclipse .launch files that run this build.
publishing {
    publications {
        devilLib(MavenPublication) {
            artifactId = 'DevilLib'
            from components.java
        }
    }
}